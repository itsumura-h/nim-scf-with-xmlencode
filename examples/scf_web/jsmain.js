/* Generated by the Nim Compiler v1.6.4 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI33555124 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1426063374 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33555128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555130 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555120 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555122 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554435 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI1426063364 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1426063363 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1426063378 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI1426063364 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "code", len: 0, typ: NTI33554439, name: "code", sons: null}, 
{kind: 1, offset: "description", len: 0, typ: NTI33554439, name: "description", sons: null}, 
{kind: 1, offset: "rate", len: 0, typ: NTI33554435, name: "rate", sons: null}]};
NTI1426063364.node = NNI1426063364;
NTI1426063363.base = NTI1426063364;
NTI1426063378.base = NTI1426063363;
var NNI33555122 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555122.node = NNI33555122;
var NNI33555120 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555120.node = NNI33555120;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI33555112.base = NTI33555083;
NTI33555113.base = NTI33555112;
NTI33555120.base = NTI33555113;
NTI33555122.base = NTI33555120;
var NNI33555130 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555130.node = NNI33555130;
NTI33555130.base = NTI33555113;
var NNI33555128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555128.node = NNI33555128;
NTI33555128.base = NTI33555113;
NTI1426063374.base = NTI1426063363;
var NNI33555124 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555124.node = NNI33555124;
NTI33555124.base = NTI33555113;

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557141, src_33557142, ti_33557143) {
  var result_33557152 = null;

    switch (ti_33557143.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557132(ti_33557143))) {
      result_33557152 = src_33557142;
      }
      else {
        result_33557152 = [src_33557142[0], src_33557142[1]];
      }
      
      break;
    case 19:
            if (dest_33557141 === null || dest_33557141 === undefined) {
        dest_33557141 = {};
      }
      else {
        for (var key in dest_33557141) { delete dest_33557141[key]; }
      }
      for (var key in src_33557142) { dest_33557141[key] = src_33557142[key]; }
      result_33557152 = dest_33557141;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557143.base == null))) {
      result_33557152 = nimCopy(dest_33557141, src_33557142, ti_33557143.base);
      }
      else {
      if ((ti_33557143.kind == 17)) {
      result_33557152 = (dest_33557141 === null || dest_33557141 === undefined) ? {m_type: ti_33557143} : dest_33557141;
      }
      else {
        result_33557152 = (dest_33557141 === null || dest_33557141 === undefined) ? {} : dest_33557141;
      }
      }
      nimCopyAux(result_33557152, src_33557142, ti_33557143.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557142 === null) {
        result_33557152 = null;
      }
      else {
        if (dest_33557141 === null || dest_33557141 === undefined || dest_33557141.length != src_33557142.length) {
          dest_33557141 = new Array(src_33557142.length);
        }
        result_33557152 = dest_33557141;
        for (var i = 0; i < src_33557142.length; ++i) {
          result_33557152[i] = nimCopy(result_33557152[i], src_33557142[i], ti_33557143.base);
        }
      }
    
      break;
    case 28:
            if (src_33557142 !== null) {
        result_33557152 = src_33557142.slice(0);
      }
    
      break;
    default: 
      result_33557152 = src_33557142;
      break;
    }

  return result_33557152;

}

function cstrToNimstr(c_33556805) {
      var ln = c_33556805.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556805.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556805.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function makeNimstrLit(c_33556802) {
      var result = [];
  for (var i = 0; i < c_33556802.length; ++i) {
    result[i] = c_33556802.charCodeAt(i);
  }
  return result;
  

  
}

function mnewString(len_33556894) {
        return new Array(len_33556894);
  

  
}

function toJSStr(s_33556808) {
                    var Temporary5;
            var Temporary7;

  var result_33556809 = null;

    var res_33556843 = newSeq_33556826((s_33556808).length);
    var i_33556844 = 0;
    var j_33556845 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556844 < (s_33556808).length)) break Label2;
          var c_33556846 = s_33556808[i_33556844];
          if ((c_33556846 < 128)) {
          res_33556843[j_33556845] = String.fromCharCode(c_33556846);
          i_33556844 += 1;
          }
          else {
            var helper_33556858 = newSeq_33556826(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556859 = c_33556846.toString(16);
                  if ((((code_33556859) == null ? 0 : (code_33556859).length) == 1)) {
                  helper_33556858.push("%0");;
                  }
                  else {
                  helper_33556858.push("%");;
                  }
                  
                  helper_33556858.push(code_33556859);;
                  i_33556844 += 1;
                    if (((s_33556808).length <= i_33556844)) Temporary5 = true; else {                      Temporary5 = (s_33556808[i_33556844] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556846 = s_33556808[i_33556844];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556843[j_33556845] = decodeURIComponent(helper_33556858.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556843[j_33556845] = helper_33556858.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556845 += 1;
        }
    } while (false);
    if (res_33556843.length < j_33556845) { for (var i = res_33556843.length ; i < j_33556845 ; ++i) res_33556843.push(null); }
               else { res_33556843.length = j_33556845; };
    result_33556809 = res_33556843.join("");

  return result_33556809;

}

function raiseException(e_33556668, ename_33556669) {
    e_33556668.name = ename_33556669;
    if ((excHandler == 0)) {
    unhandledException(e_33556668);
    }
    
    throw e_33556668;

  
}

function addInt(a_33556941, b_33556942) {
        var result = a_33556941 + b_33556942;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557190, a_33557191, b_33557192) {
      var Temporary1;

  var result_33557193 = 0;

  BeforeRet: do {
      if (!(a_33557191 <= i_33557190)) Temporary1 = false; else {        Temporary1 = (i_33557190 <= b_33557192);      }    if (Temporary1) {
    result_33557193 = i_33557190;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_33557193;

}

function subInt(a_33556945, b_33556946) {
        var result = a_33556945 - b_33556946;
    checkOverflowInt(result);
    return result;
  

  
}

function addChar(x_33557256, c_33557257) {
    x_33557256.push(c_33557257);

  
}

function chckIndx(i_33557185, a_33557186, b_33557187) {
      var Temporary1;

  var result_33557188 = 0;

  BeforeRet: do {
      if (!(a_33557186 <= i_33557185)) Temporary1 = false; else {        Temporary1 = (i_33557185 <= b_33557187);      }    if (Temporary1) {
    result_33557188 = i_33557185;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557185, a_33557186, b_33557187);
    }
    
  } while (false);

  return result_33557188;

}

function nimMax(a_33556999, b_33557000) {
    var Temporary1;

  var result_33557001 = 0;

  BeforeRet: do {
    if ((b_33557000 <= a_33556999)) {
    Temporary1 = a_33556999;
    }
    else {
    Temporary1 = b_33557000;
    }
    
    result_33557001 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33557001;

}

function nimMin(a_33556995, b_33556996) {
    var Temporary1;

  var result_33556997 = 0;

  BeforeRet: do {
    if ((a_33556995 <= b_33556996)) {
    Temporary1 = a_33556995;
    }
    else {
    Temporary1 = b_33556996;
    }
    
    result_33556997 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33556997;

}
var ConstSet2 = setConstr(32, 9, 11, 13, 10, 12);
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var objectID_671088802 = [0];

function then_469762167(future_469762170, onSuccess_469762171, onReject_469762172) {
  var result_469762173 = null;

  BeforeRet: do {
    var ret_469762188 = null;
    ret_469762188 = future_469762170.then(onSuccess_469762171, onReject_469762172)
    result_469762173 = ret_469762188;
    break BeforeRet;
  } while (false);

  return result_469762173;

}

function then_469762126(future_469762129, onSuccess_469762130, onReject_469762131) {
  var result_469762132 = null;

  BeforeRet: do {
    var ret_469762162 = null;
    ret_469762162 = future_469762129.then(onSuccess_469762130, onReject_469762131)
    result_469762132 = ret_469762162;
    break BeforeRet;
  } while (false);

  return result_469762132;

}

function isFatPointer_33557132(ti_33557133) {
  var result_33557134 = false;

  BeforeRet: do {
    result_33557134 = !((ConstSet1[ti_33557133.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557134;

}

function nimCopyAux(dest_33557145, src_33557146, n_33557147) {
    switch (n_33557147.kind) {
    case 0:
      break;
    case 1:
            dest_33557145[n_33557147.offset] = nimCopy(dest_33557145[n_33557147.offset], src_33557146[n_33557147.offset], n_33557147.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557147.sons.length; i++) {
      nimCopyAux(dest_33557145, src_33557146, n_33557147.sons[i]);
    }
    
      break;
    case 3:
            dest_33557145[n_33557147.offset] = nimCopy(dest_33557145[n_33557147.offset], src_33557146[n_33557147.offset], n_33557147.typ);
      for (var i = 0; i < n_33557147.sons.length; ++i) {
        nimCopyAux(dest_33557145, src_33557146, n_33557147.sons[i][1]);
      }
    
      break;
    }

  
}

function new_469762283(time_469762286, currencies_469762287) {
  var result_469762288 = null;

  BeforeRet: do {
    result_469762288 = {time: nimCopy(null, time_469762286, NTI33554439), currencies: nimCopy(null, currencies_469762287, NTI1426063378)};
    break BeforeRet;
  } while (false);

  return result_469762288;

}

function new_469762218(code_469762221, description_469762222, rate_469762223) {
  var result_469762224 = null;

  BeforeRet: do {
    result_469762224 = {code: nimCopy(null, code_469762221, NTI33554439), description: nimCopy(null, description_469762222, NTI33554439), rate: rate_469762223};
    break BeforeRet;
  } while (false);

  return result_469762224;

}

function toString_1258291242(self_1258291243) {
  var result_1258291244 = [];

  BeforeRet: do {
    result_1258291244 = nimCopy(null, self_1258291243.value, NTI33554439);
    break BeforeRet;
  } while (false);

  return result_1258291244;

}

function HEX24_1258291245(self_1258291246) {
  var result_1258291247 = [];

  BeforeRet: do {
    result_1258291247 = nimCopy(null, toString_1258291242(self_1258291246), NTI33554439);
    break BeforeRet;
  } while (false);

  return result_1258291247;

}

function new_1442840582() {
  var result_1442840585 = null;

  BeforeRet: do {
    result_1442840585 = {value: []};
    break BeforeRet;
  } while (false);

  return result_1442840585;

}

function add_1258291239(self_1258291240, value_1258291241) {
    self_1258291240.value.push.apply(self_1258291240.value, value_1258291241);;

  
}

function add_33556420(x_33556421, x_33556421_Idx, y_33556422) {
          if (x_33556421[x_33556421_Idx] === null) { x_33556421[x_33556421_Idx] = []; }
      var off = x_33556421[x_33556421_Idx].length;
      x_33556421[x_33556421_Idx].length += y_33556422.length;
      for (var i = 0; i < y_33556422.length; ++i) {
        x_33556421[x_33556421_Idx][off+i] = y_33556422.charCodeAt(i);
      }
    

  
}

function newSeq_33556826(len_33556828) {
  var result_33556829 = [];

    result_33556829 = new Array(len_33556828); for (var i = 0 ; i < len_33556828 ; ++i) { result_33556829[i] = null; }
  return result_33556829;

}

function unhandledException(e_33556664) {
    var buf_33556665 = [[]];
    if (!(((e_33556664.message).length == 0))) {
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556665[0].push.apply(buf_33556665[0], e_33556664.message);;
    }
    else {
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit(" ["));;
    add_33556420(buf_33556665, 0, e_33556664.name);
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556666 = toJSStr(buf_33556665[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556666);
  }
  else {
    throw cbuf_33556666;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI33555122, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33556939) {
        if (a_33556939 > 2147483647 || a_33556939 < -2147483648) raiseOverflow();
  

  
}

function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI33555130, name: null, trace: [], up: null}, "RangeDefect");

  
}

function addXmlChar_1258291203(dest_1258291204, dest_1258291204_Idx, c_1258291205) {
    switch (c_1258291205) {
    case 38:
      dest_1258291204[dest_1258291204_Idx].push.apply(dest_1258291204[dest_1258291204_Idx], makeNimstrLit("&amp;"));;
      break;
    case 60:
      dest_1258291204[dest_1258291204_Idx].push.apply(dest_1258291204[dest_1258291204_Idx], makeNimstrLit("&lt;"));;
      break;
    case 62:
      dest_1258291204[dest_1258291204_Idx].push.apply(dest_1258291204[dest_1258291204_Idx], makeNimstrLit("&gt;"));;
      break;
    case 34:
      dest_1258291204[dest_1258291204_Idx].push.apply(dest_1258291204[dest_1258291204_Idx], makeNimstrLit("&quot;"));;
      break;
    default: 
      addChar(dest_1258291204[dest_1258291204_Idx], c_1258291205);;
      break;
    }

  
}

function addChars_251658415(result_251658417, result_251658417_Idx, x_251658418, start_251658419, n_251658420) {
    var old_251658421 = (result_251658417[result_251658417_Idx]).length;
    (result_251658417[result_251658417_Idx].length = chckRange(addInt(old_251658421, n_251658420), 0, 2147483647));
    Label1: do {
      var iHEX60gensym4_251658435 = 0;
      var i_469762354 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_469762354 < n_251658420)) break Label3;
            iHEX60gensym4_251658435 = i_469762354;
            result_251658417[result_251658417_Idx][chckIndx(addInt(old_251658421, iHEX60gensym4_251658435), 0, (result_251658417[result_251658417_Idx]).length - 1)] = x_251658418.charCodeAt(chckIndx(addInt(start_251658419, iHEX60gensym4_251658435), 0, (x_251658418).length - 1));
            i_469762354 = addInt(i_469762354, 1);
          }
      } while (false);
    } while (false);

  
}

function addChars_251658411(result_251658413, result_251658413_Idx, x_251658414) {
    addChars_251658415(result_251658413, result_251658413_Idx, x_251658414, 0, ((x_251658414) == null ? 0 : (x_251658414).length));

  
}

function addInt_251658436(result_251658437, result_251658437_Idx, x_251658438) {
    addChars_251658411(result_251658437, result_251658437_Idx, ((x_251658438) + ""));

  
}

function addInt_251658457(result_251658458, result_251658458_Idx, x_251658459) {
    addInt_251658436(result_251658458, result_251658458_Idx, x_251658459);

  
}

function HEX24_335544323(x_335544324) {
  var result_335544325 = [[]];

    addInt_251658457(result_335544325, 0, x_335544324);

  return result_335544325[0];

}

function raiseIndexError(i_33556755, a_33556756, b_33556757) {
    var Temporary1;

    if ((b_33556757 < a_33556756)) {
    Temporary1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Temporary1 = (makeNimstrLit("index ") || []).concat(HEX24_335544323(i_33556755) || [],makeNimstrLit(" not in ") || [],HEX24_335544323(a_33556756) || [],makeNimstrLit(" .. ") || [],HEX24_335544323(b_33556757) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554439), parent: null, m_type: NTI33555128, name: null, trace: [], up: null}, "IndexDefect");

  
}

function xmlEncode_1258291206(s_1258291207) {
  var result_1258291208 = [[]];

    result_1258291208[0] = nimCopy(null, mnewString(0), NTI33554439);
    Label1: do {
      var i_1258291217 = 0;
      var colontmp__469762345 = 0;
      colontmp__469762345 = subInt((s_1258291207).length, 1);
      var res_469762346 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_469762346 <= colontmp__469762345)) break Label3;
            i_1258291217 = res_469762346;
            addXmlChar_1258291203(result_1258291208, 0, s_1258291207[chckIndx(i_1258291217, 0, (s_1258291207).length - 1)]);
            res_469762346 = addInt(res_469762346, 1);
          }
      } while (false);
    } while (false);

  return result_1258291208[0];

}

function substr_33557907(s_33557908, first_33557909, last_33557910) {
  var result_33557911 = [];

    var first_33557912 = nimMax(first_33557909, 0);
    var L_33557913 = nimMax(addInt(subInt(nimMin(last_33557910, (s_33557908).length - 1), first_33557912), 1), 0);
    result_33557911 = nimCopy(null, mnewString(chckRange(L_33557913, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_33557918 = 0;
      var colontmp__469762359 = 0;
      colontmp__469762359 = subInt(L_33557913, 1);
      var res_469762360 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_469762360 <= colontmp__469762359)) break Label3;
            i_33557918 = res_469762360;
            result_33557911[chckIndx(i_33557918, 0, (result_33557911).length - 1)] = s_33557908[chckIndx(addInt(i_33557918, first_33557912), 0, (s_33557908).length - 1)];
            res_469762360 = addInt(res_469762360, 1);
          }
      } while (false);
    } while (false);

  return result_33557911;

}

function nsuStrip(s_1006635227, leading_1006635228, trailing_1006635229, chars_1006635230) {
          var Temporary5;

  var result_1006635231 = [];

    var first_1006635232 = 0;
    var last_1006635233 = subInt((s_1006635227).length, 1);
    if (leading_1006635228) {
    Label1: do {
        Label2: while (true) {
        if (!((first_1006635232 <= last_1006635233) && (chars_1006635230[s_1006635227[chckIndx(first_1006635232, 0, (s_1006635227).length - 1)]] != undefined))) break Label2;
          first_1006635232 = addInt(first_1006635232, 1);
        }
    } while (false);
    }
    
    if (trailing_1006635229) {
    Label3: do {
        Label4: while (true) {
          if (!(first_1006635232 <= last_1006635233)) Temporary5 = false; else {            Temporary5 = (chars_1006635230[s_1006635227[chckIndx(last_1006635233, 0, (s_1006635227).length - 1)]] != undefined);          }        if (!Temporary5) break Label4;
          last_1006635233 = subInt(last_1006635233, 1);
        }
    } while (false);
    }
    
    result_1006635231 = nimCopy(null, substr_33557907(s_1006635227, first_1006635232, last_1006635233), NTI33554439);

  return result_1006635231;

}

function toString_1258291225(val_1258291226) {
  var result_1258291227 = [];

  BeforeRet: do {
    result_1258291227 = nimCopy(null, xmlEncode_1258291206(nsuStrip(val_1258291226, true, true, ConstSet2)), NTI33554439);
    break BeforeRet;
  } while (false);

  return result_1258291227;

}

function time_1426063392(self_1426063393) {
  var result_1426063394 = [];

    result_1426063394 = nimCopy(null, self_1426063393.time, NTI33554439);

  return result_1426063394;

}

function currencies_1426063395(self_1426063396) {
  var result_1426063397 = [];

    result_1426063397 = nimCopy(null, self_1426063396.currencies, NTI1426063374);

  return result_1426063397;

}

function nimFloatToString_352321654(a_352321655) {
  var result_352321656 = null;

        function nimOnlyDigitsOrMinus(n) {
      return n.toString().match(/^-?\d+$/);
    }
    if (Number.isSafeInteger(a_352321655))
      result_352321656 = a_352321655 === 0 && 1 / a_352321655 < 0 ? "-0.0" : a_352321655+".0"
    else {
      result_352321656 = a_352321655+""
      if(nimOnlyDigitsOrMinus(result_352321656)){
        result_352321656 = a_352321655+".0"
      }
    }
  

  return result_352321656;

}

function addFloat_33557373(result_33557375, result_33557375_Idx, x_33557376) {
    add_33556420(result_33557375, result_33557375_Idx, nimFloatToString_352321654(x_33557376));

  
}

function HEX24_33557369(x_33557371) {
  var result_33557372 = [[]];

    addFloat_33557373(result_33557372, 0, x_33557371);

  return result_33557372[0];

}

function toString_1442840626(val_1442840628) {
  var result_1442840629 = [];

  BeforeRet: do {
    result_1442840629 = nimCopy(null, xmlEncode_1258291206(HEX24_33557369(val_1442840628)), NTI33554439);
    break BeforeRet;
  } while (false);

  return result_1442840629;

}

function rate_1426063379(self_1426063380) {
  var result_1426063381 = 0.0;

    result_1426063381 = self_1426063380.rate;

  return result_1426063381;

}

function code_1426063373(self_1426063374) {
  var result_1426063375 = [];

    result_1426063375 = nimCopy(null, self_1426063374.code, NTI33554439);

  return result_1426063375;

}

function description_1426063376(self_1426063377) {
  var result_1426063378 = [];

    result_1426063378 = nimCopy(null, self_1426063377.description, NTI33554439);

  return result_1426063378;

}

function sysFatal_218103842(message_218103845) {
    raiseException({message: nimCopy(null, message_218103845, NTI33554439), m_type: NTI33555124, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}

function raiseAssert_218103840(msg_218103841) {
    sysFatal_218103842(msg_218103841);

  
}

function failedAssertImpl_218103864(msg_218103865) {
    raiseAssert_218103840(msg_218103865);

  
}

function pageView_1442840579(viewModel_1442840580) {
  var result_1442840581 = null;

    result_1442840581 = new_1442840582();
    add_1258291239(result_1442840581, (makeNimstrLit("<p>time: ") || []).concat(toString_1258291225(time_1426063392(viewModel_1442840580)) || [],makeNimstrLit("</p>\x0A<table border=\"1\">\x0A  <tr>\x0A    <th>rate</th>\x0A    <th>code</th>\x0A    <th>description</th>\x0A  </tr>\x0A") || []));
    Label1: do {
      var row_1442840625 = null;
      var colontmp__469762339 = [];
      colontmp__469762339 = currencies_1426063395(viewModel_1442840580);
      var i_469762341 = 0;
      var L_469762342 = (colontmp__469762339).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_469762341 < L_469762342)) break Label3;
            row_1442840625 = colontmp__469762339[chckIndx(i_469762341, 0, (colontmp__469762339).length - 1)];
            add_1258291239(result_1442840581, (makeNimstrLit("    <tr>\x0A      <td>") || []).concat(toString_1442840626(rate_1426063379(row_1442840625)) || [],makeNimstrLit("</td>\x0A      <td>") || [],toString_1258291225(code_1426063373(row_1442840625)) || [],makeNimstrLit("</td>\x0A      <td>") || [],toString_1258291225(description_1426063376(row_1442840625)) || [],makeNimstrLit("</td>\x0A    </tr>\x0A") || []));
            i_469762341 = addInt(i_469762341, 1);
            if (!(((colontmp__469762339).length == L_469762342))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    add_1258291239(result_1442840581, makeNimstrLit("</table>\x0A"));

  return result_1442840581;

}
async function jsmain() {
    
function HEX3Aanonymous_469762114(response_469762115) {
      var result_469762116 = null;

        result_469762116 = response_469762115.json();

      return result_469762116;

    }
    
function HEX3Aanonymous_469762164(json_469762165) {
        respJson_469762091 = json_469762165;

      
    }

  var result_469762081 = null;

  BeforeRet: do {
    var respJson_469762091 = {};
    (await then_469762167(then_469762126(fetch("https://api.coindesk.com/v1/bpi/currentprice.json"), HEX3Aanonymous_469762114, null), HEX3Aanonymous_469762164, null));
    var viewModel_469762307 = new_469762283(cstrToNimstr((respJson_469762091["time"]["updated"])), [new_469762218(cstrToNimstr((respJson_469762091["bpi"]["USD"]["code"])), cstrToNimstr((respJson_469762091["bpi"]["USD"]["description"])), (respJson_469762091["bpi"]["USD"]["rate_float"])), new_469762218(cstrToNimstr((respJson_469762091["bpi"]["EUR"]["code"])), cstrToNimstr((respJson_469762091["bpi"]["EUR"]["description"])), (respJson_469762091["bpi"]["EUR"]["rate_float"])), new_469762218(cstrToNimstr((respJson_469762091["bpi"]["GBP"]["code"])), cstrToNimstr((respJson_469762091["bpi"]["GBP"]["description"])), (respJson_469762091["bpi"]["GBP"]["rate_float"]))]);
    result_469762081 = toJSStr(HEX24_1258291245(pageView_1442840579(viewModel_469762307)));
    break BeforeRet;
  } while (false);

  return result_469762081;

}
